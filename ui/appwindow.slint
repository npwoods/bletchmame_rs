import { HorizontalBox, VerticalBox, Button, StandardListView, StandardTableView, LineEdit, ListView, ScrollView, GridBox, Spinner, TextEdit } from "std-widgets.slint";
import { NavigationDrawer, NavigationItem, FilledIconButton, SearchBar } from "@slint/material.slint";
import { SimpleMenuEntry } from "common.slint";
import { Icons } from "icons.slint";

struct CollectionContextMenuInfo {
    move-up-command: string,
    move-down-command: string,
    delete-command: string,
    rename-command: string,
    new-collection-command: string}

struct ItemContextMenuInfo {
    run-title: string,
    run-descs: [SimpleMenuEntry],
    configure-action: string,
    browse-action: string,
    add-to-existing-folder-descs: [SimpleMenuEntry],
    new-folder-action: string,
    remove-from-folder-desc: SimpleMenuEntry,
}

struct ReportIssue {
    text: string,
    button-text: string}

export component AppWindow inherits Window {
    // positioning and title
    min-width: 100px;
    min-height: 100px;
    max-width: 10000px;
    max-height: 10000px;
    icon: Icons.bletchmame;
    title: @tr("BletchMAME 3.0 prototype") + (running-machine-desc != "" ? ": " + running-machine-desc : "");

    // width and height
    changed width => {
        self.size-changed();
    }
    changed height => {
        self.size-changed();
    }
    callback size-changed();

    // the currently running machine (empty if no emulation is running)
    in property <string> running-machine-desc;

    // the menu bar
    in property <bool> menubar-visible: true;
    in property <bool> is-paused;
    in property <bool> is-recording;
    in property <bool> is-throttled;
    in property <bool> is-fullscreen;
    in property <bool> is-sound-enabled;
    in property <bool> has-last-save-state;
    in property <bool> has-cheats;
    in property <bool> has-classic-mame-menu;
    in property <bool> can-record-movie;
    in property <bool> can-refresh-info-db;
    in property <bool> has-input-class-controller;
    in property <bool> has-input-class-keyboard;
    in property <bool> has-input-class-misc;
    in property <bool> has-input-class-config;
    in property <bool> has-input-class-dipswitch;
    callback menu-item-activated(string, string);
    callback menu-item-action(string);
    in property <[SimpleMenuEntry]> menu-entries-throttle;
    in property <int> menu-entries-throttle-current-index;
    in property <[SimpleMenuEntry]> menu-entries-frameskip;
    in property <int> menu-entries-frameskip-current-index;
    in property <[SimpleMenuEntry]> menu-entries-builtin-collections;
    in property <[bool]> menu-entries-builtin-collections-checked;

    // menu command strings
    in property <string> menu-action-file-stop;
    in property <string> menu-action-file-pause;
    in property <string> menu-action-file-devices-and-images;
    in property <string> menu-action-file-quick-load-state;
    in property <string> menu-action-file-quick-save-state;
    in property <string> menu-action-file-load-state;
    in property <string> menu-action-file-save-state;
    in property <string> menu-action-file-save-screenshot;
    in property <string> menu-action-file-record-movie;
    in property <string> menu-action-file-debugger;
    in property <string> menu-action-file-reset-soft;
    in property <string> menu-action-file-reset-hard;
    in property <string> menu-action-file-exit;
    in property <string> menu-action-options-throttle-speed-increase;
    in property <string> menu-action-options-throttle-speed-decrease;
    in property <string> menu-action-options-toggle-warp;
    in property <string> menu-action-options-toggle-fullscreen;
    in property <string> menu-action-options-toggle-menubar;
    in property <string> menu-action-options-toggle-sound;
    in property <string> menu-action-options-cheats;
    in property <string> menu-action-options-classic;
    in property <string> menu-action-options-console;
    in property <string> menu-action-settings-input-controller;
    in property <string> menu-action-settings-input-keyboard;
    in property <string> menu-action-settings-input-misc;
    in property <string> menu-action-settings-input-config;
    in property <string> menu-action-settings-input-dipswitch;
    in property <string> menu-action-settings-paths;
    in property <string> menu-action-settings-reset;
    in property <string> menu-action-settings-import-mame-ini;
    in property <string> menu-action-help-refresh-info-db;
    in property <string> menu-action-help-website;
    in property <string> menu-action-help-about;

    // height of the menubar
    public function menubar-height() -> length {
        return hbox.absolute-position.y;
    }

    // collections context menu
    in-out property <CollectionContextMenuInfo> collection-context-menu-info;
    public function show-collection-context-menu(info: CollectionContextMenuInfo, point: Point) {
        self.collection-context-menu-info = info;
        collection-context-menu.show(point);
    }

    // items context menu
    in-out property <ItemContextMenuInfo> item-context-menu-info;
    public function show-item-context-menu(info: ItemContextMenuInfo, point: Point) {
        self.item-context-menu-info = info;
        item-context-menu.show(point);
    }

    // the collections view on the left
    in property <[NavigationItem]> collections-model;
    in-out property <int> collections-view-selected-index;
    callback collections-view-selected(int);
    callback collections-row-pointer-event(int, PointerEvent, Point);

    // the toolbar
    in property <bool> history-can-go-back;
    in property <bool> history-can-go-forward;
    in property <bool> bookmark-collection-enabled;
    in property <string> current-collection-text;
    in-out property <string> items-search-text;
    callback history-advance-clicked(int);
    callback bookmark-collection-clicked();

    // the items view
    in property <string> is-empty-reason;
    in-out property <int> items-view-selected-index <=> items-table-view.current-row;
    in-out property <[TableColumn]> items-columns <=> items-table-view.columns;
    callback items-search-text-changed(string);
    callback items-sort-ascending(int);
    callback items-sort-descending(int);
    callback items-current-row-changed();
    callback items-row-pointer-event(int, PointerEvent, Point);
    in property <[[StandardListViewItem]]> items-model;
    public function items-view-select(index: int) {
        items-table-view.set-current-row(index);
    }

    // snapshot and history
    in property <string> current-snap-view;
    in property <bool> history-xml-is-loading;
    pure callback get-snap-image(string) -> image;
    pure callback get-history-text(string) -> string;
    in-out property <int> snap-image-salt;
    in-out property <int> history-text-salt;
    function get-snap-image-func() -> image {
        let _ = snap-image-salt; // force re-evaluation when salt changes
        return get-snap-image(current-snap-view);
    }
    function get-history-text-func() -> string {
        let _ = history-text-salt; // force re-evaluation when salt changes
        return get-history-text(current-snap-view);
    }

    // the report view
    in property <string> report-message;
    in property <string> report-submessage;
    in property <bool> report-spinning;
    in property <string> report-button-text;
    in property <[ReportIssue]> report-issues;
    callback report-button-clicked();
    callback issue-button-clicked(int);

    // mode - drives what is visible and what is not
    in property <bool> has-started;
    function mode() -> string {
        if !has-started {
            "starting"
        } else if (self.running-machine-desc != "") {
            "running"
        } else if (self.report-message != "") {
            "report"
        } else {
            "ready"
        }
    }


    // Slint's crude menu bar
    if menubar-visible: MenuBar {
        Menu {
            title: @tr("MenuBar" => "File");
            MenuItem {
                title: @tr("MenuBar" => "Stop");
                enabled: mode() == "running";
                activated => {
                    menu-item-action(root.menu-action-file-stop);
                }
            }

            MenuItem {
                title: @tr("MenuBar" => "Pause");
                enabled: mode() == "running";
                activated => {
                    menu-item-action(root.menu-action-file-pause);
                }
            }

            MenuSeparator { }

            MenuItem {
                title: @tr("MenuBar" => "Devices and Images...");
                enabled: mode() == "running";
                activated => {
                    menu-item-action(root.menu-action-file-devices-and-images);
                }
            }

            MenuItem {
                title: @tr("MenuBar" => "Quick Load State");
                enabled: has-last-save-state;
                muda-accelerator: "F7";
                activated => {
                    menu-item-action(root.menu-action-file-quick-load-state);
                }
            }

            MenuItem {
                title: @tr("MenuBar" => "Quick Save State");
                enabled: has-last-save-state;
                muda-accelerator: "Shift+F7";
                activated => {
                    menu-item-action(root.menu-action-file-quick-save-state);
                }
            }

            MenuItem {
                title: @tr("MenuBar" => "Load State...");
                enabled: mode() == "running";
                muda-accelerator: "Ctrl+F7";
                activated => {
                    menu-item-action(root.menu-action-file-load-state);
                }
            }

            MenuItem {
                title: @tr("MenuBar" => "Save State...");
                enabled: mode() == "running";
                muda-accelerator: "Ctrl+Shift+F7";
                activated => {
                    menu-item-action(root.menu-action-file-save-state);
                }
            }

            MenuSeparator { }

            MenuItem {
                title: @tr("MenuBar" => "Save Screenshot...");
                enabled: mode() == "running";
                muda-accelerator: "F12";
                activated => {
                    menu-item-action(root.menu-action-file-save-screenshot);
                }
            }

            MenuItem {
                title: is-recording ? @tr("MenuBar" => "Stop Recording") : @tr("MenuBar" => "Record Movie...");
                enabled: can-record-movie;
                muda-accelerator: "Shift+F12";
                activated => {
                    menu-item-action(root.menu-action-file-record-movie);
                }
            }

            MenuSeparator { }

            MenuItem {
                title: @tr("MenuBar" => "Debugger...");
                enabled: mode() == "running";
                activated => {
                    menu-item-action(root.menu-action-file-debugger);
                }
            }

            Menu {
                title: @tr("MenuBar" => "Reset");
                enabled: mode() == "running";
                MenuItem {
                    title: @tr("MenuBar" => "Soft Reset");
                    activated => {
                        menu-item-action(root.menu-action-file-reset-soft);
                    }
                }

                MenuItem {
                    title: @tr("MenuBar" => "Hard Reset");
                    activated => {
                        menu-item-action(root.menu-action-file-reset-hard);
                    }
                }
            }

            MenuItem {
                title: @tr("MenuBar" => "Exit");
                enabled: true;
                muda-accelerator: "Ctrl+Shift+KeyX";
                activated => {
                    menu-item-action(root.menu-action-file-exit);
                }
            }
        }

        Menu {
            title: @tr("MenuBar" => "Options");
            Menu {
                title: @tr("MenuBar" => "Throttle");
                enabled: mode() == "running";
                for entry[index] in menu-entries-throttle: MenuItem {
                    title: entry.title;
                    checkable: true;
                    checked: index == menu-entries-throttle-current-index;
                    activated => {
                        menu-item-action(entry.action);
                    }
                }
                MenuSeparator { }

                MenuItem {
                    title: @tr("MenuBar" => "Increase Speed");
                    muda-accelerator: "F9";
                    activated => {
                        menu-item-action(root.menu-action-options-throttle-speed-increase);
                    }
                }

                MenuItem {
                    title: @tr("MenuBar" => "Decrease Speed");
                    muda-accelerator: "F8";
                    activated => {
                        menu-item-action(root.menu-action-options-throttle-speed-decrease);
                    }
                }

                MenuItem {
                    title: @tr("MenuBar" => "Warp mode");
                    checkable: true;
                    checked: !is-throttled;
                    muda-accelerator: "F10";
                    activated => {
                        menu-item-action(root.menu-action-options-toggle-warp);
                    }
                }
            }

            Menu {
                title: @tr("MenuBar" => "Frame Skip");
                enabled: mode() == "running";
                for entry[index] in menu-entries-frameskip: MenuItem {
                    title: entry.title;
                    checkable: true;
                    checked: index == menu-entries-frameskip-current-index;
                    activated => {
                        menu-item-action(entry.action);
                    }
                }
            }

            MenuItem {
                title: @tr("MenuBar" => "Full Screen");
                enabled: true;
                checkable: true;
                checked: is-fullscreen;
                muda-accelerator: "F11";
                activated => {
                    menu-item-action(root.menu-action-options-toggle-fullscreen);
                }
            }

            MenuItem {
                title: @tr("MenuBar" => "Toggle Menu Bar");
                enabled: mode() == "running";
                muda-accelerator: "ScrollLock";
                activated => {
                    menu-item-action(root.menu-action-options-toggle-menubar);
                }
            }

            MenuItem {
                title: @tr("MenuBar" => "Sound");
                enabled: mode() == "running";
                checkable: true;
                checked: is-sound-enabled;
                activated => {
                    menu-item-action(root.menu-action-options-toggle-sound);
                }
            }

            MenuItem {
                title: @tr("MenuBar" => "Cheats...");
                enabled: has-cheats;
                activated => {
                    menu-item-action(root.menu-action-options-cheats);
                }
            }

            MenuSeparator { }

            MenuItem {
                title: @tr("MenuBar" => "Classic MAME Menu");
                enabled: has-classic-mame-menu;
                activated => {
                    menu-item-action(root.menu-action-options-classic);
                }
            }

            MenuItem {
                title: @tr("MenuBar" => "Console");
                enabled: true;
                activated => {
                    menu-item-action(root.menu-action-options-console);
                }
            }
        }

        Menu {
            title: @tr("MenuBar" => "Settings");
            MenuItem {
                title: @tr("MenuBar" => "Joysticks and Controllers...");
                enabled: has-input-class-controller;
                activated => {
                    menu-item-action(root.menu-action-settings-input-controller);
                }
            }

            MenuItem {
                title: @tr("MenuBar" => "Keyboard...");
                enabled: has-input-class-keyboard;
                activated => {
                    menu-item-action(root.menu-action-settings-input-keyboard);
                }
            }

            MenuItem {
                title: @tr("MenuBar" => "Miscellaneous Input...");
                enabled: has-input-class-misc;
                activated => {
                    menu-item-action(root.menu-action-settings-input-misc);
                }
            }

            MenuItem {
                title: @tr("MenuBar" => "Configuration...");
                enabled: has-input-class-config;
                activated => {
                    menu-item-action(root.menu-action-settings-input-config);
                }
            }

            MenuItem {
                title: @tr("MenuBar" => "DIP Switches...");
                enabled: has-input-class-dipswitch;
                activated => {
                    menu-item-action(root.menu-action-settings-input-dipswitch);
                }
            }

            MenuSeparator { }

            MenuItem {
                title: @tr("MenuBar" => "Paths...");
                enabled: true;
                activated => {
                    menu-item-action(root.menu-action-settings-paths);
                }
            }

            Menu {
                title: @tr("MenuBar" => "Builtin Collections");
                enabled: true;
                for entry[index] in menu-entries-builtin-collections: MenuItem {
                    title: entry.title;
                    checkable: true;
                    checked: menu-entries-builtin-collections-checked[index];
                    activated => {
                        menu-item-action(entry.action);
                    }
                }
            }

            MenuItem {
                title: @tr("MenuBar" => "Reset Settings To Default");
                enabled: true;
                activated => {
                    menu-item-action(root.menu-action-settings-reset);
                }
            }

            MenuItem {
                title: @tr("MenuBar" => "Import MAME INI...");
                enabled: true;
                activated => {
                    menu-item-action(root.menu-action-settings-import-mame-ini);
                }
            }
        }

        Menu {
            title: @tr("MenuBar" => "Help");
            MenuItem {
                title: @tr("MenuBar" => "Refresh MAME machine info...");
                enabled: can-refresh-info-db;
                activated => {
                    menu-item-action(root.menu-action-help-refresh-info-db);
                }
            }

            MenuItem {
                title: @tr("MenuBar" => "BletchMAME web site...");
                enabled: true;
                activated => {
                    menu-item-action(root.menu-action-help-website);
                }
            }

            MenuItem {
                title: @tr("MenuBar" => "About...");
                enabled: true;
                activated => {
                    menu-item-action(root.menu-action-help-about);
                }
            }
        }
    }
    collection-context-menu := ContextMenuArea {
        Menu {
            MenuItem {
                title: @tr("CollectionContextMenu" => "Move Up");
                enabled: collection-context-menu-info.move-up-command != "";
                activated => {
                    menu-item-action(collection-context-menu-info.move-up-command);
                }
            }

            MenuItem {
                title: @tr("CollectionContextMenu" => "Move Down");
                enabled: collection-context-menu-info.move-down-command != "";
                activated => {
                    menu-item-action(collection-context-menu-info.move-down-command);
                }
            }

            MenuItem {
                title: @tr("CollectionContextMenu" => "Delete");
                enabled: collection-context-menu-info.delete-command != "";
                activated => {
                    menu-item-action(collection-context-menu-info.delete-command);
                }
            }

            MenuItem {
                title: @tr("CollectionContextMenu" => "Rename");
                enabled: collection-context-menu-info.rename-command != "";
                activated => {
                    menu-item-action(collection-context-menu-info.rename-command);
                }
            }

            MenuSeparator { }

            MenuItem {
                title: @tr("CollectionContextMenu" => "New Collection");
                enabled: collection-context-menu-info.new-collection-command != "";
                activated => {
                    menu-item-action(collection-context-menu-info.new-collection-command);
                }
            }
        }
    }

    item-context-menu := ContextMenuArea {
        Menu {
            if item-context-menu-info.run-descs.length == 1: MenuItem {
                title: item-context-menu-info.run-title;
                activated => {
                    menu-item-action(item-context-menu-info.run-descs[0].action);
                }
            }
            if item-context-menu-info.run-descs.length > 1: Menu {
                title: item-context-menu-info.run-title;
                for subdesc in item-context-menu-info.run-descs: MenuItem {
                    title: subdesc.title;
                    activated => {
                        menu-item-action(subdesc.action);
                    }
                }
            }
            MenuItem {
                title: @tr("ItemContextMenu" => "Configure...");
                enabled: !item-context-menu-info.configure-action.is-empty;
                activated => {
                    menu-item-action(item-context-menu-info.configure-action);
                }
            }

            MenuSeparator { }

            MenuItem {
                title: @tr("ItemContextMenu" => "Browse Software");
                enabled: !item-context-menu-info.browse-action.is-empty;
                activated => {
                    menu-item-action(item-context-menu-info.browse-action);
                }
            }

            if item-context-menu-info.add-to-existing-folder-descs.length > 0 || !item-context-menu-info.new-folder-action.is-empty: Menu {
                title: @tr("ItemContextMenu" => "Add To Folder");
                for desc in item-context-menu-info.add-to-existing-folder-descs: MenuItem {
                    title: desc.title;
                    activated => {
                        menu-item-action(desc.action);
                    }
                }
                MenuSeparator { }

                if !item-context-menu-info.new-folder-action.is-empty: MenuItem {
                    title: @tr("ItemContextMenu" => "New Folder...");
                    activated => {
                        menu-item-action(item-context-menu-info.new-folder-action);
                    }
                }
            }
            if !item-context-menu-info.remove-from-folder-desc.title.is-empty: MenuItem {
                title: item-context-menu-info.remove-from-folder-desc.title;
                enabled: !item-context-menu-info.remove-from-folder-desc.action.is-empty;
                activated => {
                    menu-item-action(item-context-menu-info.remove-from-folder-desc.action);
                }
            }
        }
    }

    hbox := HorizontalBox {
        alignment: stretch;
        preferred-width: 100%;
        preferred-height: 100%;
        visible: root.mode() == "ready";

        // collections list view on the left
        VerticalBox {
            alignment: start;
            preferred-height: 100%;
            NavigationDrawer {
                vertical-stretch: 0;
                width: 250px;
                groups: [{ title: 0, items: collections-model }];
                current-index <=> collections-view-selected-index;
                selected(group-index, index) => {
                    collections-view-selected(index)
                }
                item-pointer-event(group-index, item-index, event, point) => {
                    collections-row-pointer-event(item-index, event, { x: point.x + self.absolute-position.x, y: point.y + self.absolute-position.y })
                }
            }

            Rectangle {
                vertical-stretch: 1;
                background: green;
            }
        }

        VerticalBox {
            alignment: stretch;
                
            // current collection label
            Text {
                vertical-stretch: 0;
                horizontal-alignment: left;
                text: current-collection-text;
                height: 20px;
            }
                
            // toolbar below the current collection
            HorizontalBox {
                vertical-stretch: 0;
                alignment: stretch;
                height: 50px;
                preferred-width: 100%;
                FilledIconButton {
                    horizontal-stretch: 0;
                    icon: Icons.arrow-back;
                    enabled: history-can-go-back;
                    clicked => {
                        history-advance-clicked(-1)
                    }
                }

                FilledIconButton {
                    horizontal-stretch: 0;
                    icon: Icons.book;
                    enabled: bookmark-collection-enabled;
                    clicked => {
                        bookmark-collection-clicked();
                    }
                }

                FilledIconButton {
                    horizontal-stretch: 0;
                    icon: Icons.arrow-forward;
                    enabled: history-can-go-forward;
                    clicked => {
                        history-advance-clicked(+1)
                    }
                }

                SearchBar {
                    horizontal-stretch: 1;
                    text <=> items-search-text;
                    edited(text) => {
                        items-search-text-changed(text)
                    }
                }
            }

            // items table
            items-table-view := StandardTableView {
                vertical-stretch: 1;
                rows: items-model;
                sort-ascending(index) => {
                    items-sort-ascending(index)
                }
                sort-descending(index) => {
                    items-sort-descending(index)
                }
                current-row-changed(index) => {
                    items-current-row-changed()
                }
                row-pointer-event(row, event, point) => {
                    items-row-pointer-event(row, event, {
                        x: point.x + items-table-view.absolute-position.x,
                        y: point.y + items-table-view.absolute-position.y
                    })
                }
            }

            // items empty text
            Text {
                visible: root.mode() == "ready" && is-empty-reason != "";
                text: is-empty-reason;
            }
        }

        VerticalBox {
            alignment: center;
            Image {
                source: get-snap-image-func();
                width: 300px;
                height: 300px;
            }

            TextEdit {
                width: 300px;
                height: 300px;
                text: get-history-text-func();
                visible: get-history-text(current-snap-view) != "";
                read-only: true;
            }

            Spinner {
                width: 300px;
                height: 300px;
                visible: root.history-xml-is-loading;
                indeterminate: true;
            }
        }
    }

    // report view
    HorizontalBox {
        visible: root.mode() == "report";
        alignment: center;
        if root.report-spinning: VerticalBox {
            // spinner
            alignment: center;
            Spinner {
                width: 150px;
                height: 150px;
                indeterminate: true;
            }
        }
        VerticalBox {
            alignment: center;

            // report message
            Text {
                text: root.report-message;
                horizontal-alignment: center;
                font-size: 24px;
                wrap: word-wrap;
            }

            // report submessage
            if root.report-submessage != "": Text {
                text: root.report-submessage;
                horizontal-alignment: center;
                font-size: 12px;
                wrap: word-wrap;
            }

            // report button
            if root.report-button-text != "": HorizontalBox {
                alignment: center;
                Button {
                    text: root.report-button-text;
                    width: 50px;
                    clicked => {
                        root.report-button-clicked();
                    }
                }
            }

            // report issues
            for issue[index] in report-issues: HorizontalBox {
                Text {
                    horizontal-alignment: left;
                    text: issue.text;
                }

                Button {
                    visible: issue.button-text != "";
                    text: issue.button-text;
                    clicked => {
                        root.issue-button-clicked(index);
                    }
                }
            }
        }
    }
}
