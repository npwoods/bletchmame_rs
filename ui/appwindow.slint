import { HorizontalBox, VerticalBox, Button, StandardListView, StandardTableView, LineEdit, ListView, ScrollView, GridBox, Spinner } from "std-widgets.slint";
import { MagicListView, MagicListViewItem } from "@vivi/magic.slint";
import { FilledIconButton, SearchBar } from "@slint/material.slint";
import { SimpleMenuEntry } from "common.slint";

struct CollectionContextMenuInfo {
    move-up-command: string,
    move-down-command: string,
    delete-command: string,
    rename-command: string,
    new-collection-command: string}

struct ItemContextMenuInfo {
    run-desc: {command: string, title: string},
    run-subdescs: [{command: string, title: string}],
    configure-command: string,
    browse-command: string,
    add-to-existing-folder-descs: [{command: string, title: string}],
    new-folder-command: string,
    remove-from-folder-desc: {command: string, title: string},
}

struct ReportIssue {
    text: string,
    button-text: string}

export component AppWindow inherits Window {
    // positioning and title
    min-width: 100px;
    min-height: 100px;
    max-width: 10000px;
    max-height: 10000px;
    icon: @image-url("bletchmame.png");
    title: @tr("BletchMAME 3.0 prototype") + (running-machine-desc != "" ? ": " + running-machine-desc : "");

    // width and height
    changed width => {
        self.size-changed();
    }
    changed height => {
        self.size-changed();
    }
    callback size-changed();

    // the currently running machine (empty if no emulation is running)
    in property <string> running-machine-desc;

    // the menu bar
    in property <bool> menubar-visible: true;
    in property <bool> is-paused;
    in property <bool> is-recording;
    in property <bool> is-throttled;
    in property <bool> is-fullscreen;
    in property <bool> is-sound-enabled;
    in property <bool> has-last-save-state;
    in property <bool> has-cheats;
    in property <bool> has-classic-mame-menu;
    in property <bool> can-record-movie;
    in property <bool> can-refresh-info-db;
    in property <bool> has-input-class-controller;
    in property <bool> has-input-class-keyboard;
    in property <bool> has-input-class-misc;
    in property <bool> has-input-class-config;
    in property <bool> has-input-class-dipswitch;
    callback menu-item-activated(string, string);
    callback menu-item-command(string);
    in property <[SimpleMenuEntry]> menu-entries-throttle;
    in property <int> menu-entries-throttle-current-index;
    in property <[string]> menu-items-builtin-collections;
    public function menubar-height() -> length {
        return hbox.absolute-position.y;
    }

    // collections context menu
    in-out property <CollectionContextMenuInfo> collection-context-menu-info;
    public function show-collection-context-menu(info: CollectionContextMenuInfo, point: Point) {
        self.collection-context-menu-info = info;
        collection-context-menu.show(point);
    }

    // items context menu
    in-out property <ItemContextMenuInfo> item-context-menu-info;
    public function show-item-context-menu(info: ItemContextMenuInfo, point: Point) {
        self.item-context-menu-info = info;
        item-context-menu.show(point);
    }

    // the collections view on the left
    in property <[MagicListViewItem]> collections-model;
    callback collections-view-selected(int);
    callback collections-row-pointer-event(int, PointerEvent, Point);
    public function collections-view-select(index: int) {
        collections-list-view.current_index = index;
    }

    // the toolbar
    in property <bool> history-can-go-back;
    in property <bool> history-can-go-forward;
    in property <bool> bookmark-collection-enabled;
    in property <string> current-collection-text;
    in-out property <string> items-search-text;
    callback history-advance-clicked(int);
    callback bookmark-collection-clicked();

    // the items view
    in property <string> is-empty-reason;
    in-out property <int> items-view-selected-index <=> items-table-view.current-row;
    in-out property <[TableColumn]> items-columns <=> items-table-view.columns;
    callback items-search-text-changed(string);
    callback items-sort-ascending(int);
    callback items-sort-descending(int);
    callback items-current-row-changed();
    callback items-row-pointer-event(int, PointerEvent, Point);
    in property <[[StandardListViewItem]]> items-model;
    public function items-view-select(index: int) {
        items-table-view.set-current-row(index);
    }

    // the report view
    in property <string> report-message;
    in property <string> report-submessage;
    in property <bool> report-spinning;
    in property <string> report-button-text;
    in property <[ReportIssue]> report-issues;
    callback report-button-clicked();
    callback issue-button-clicked(int);

    // mode - drives what is visible and what is not
    in property <bool> has-started;
    function mode() -> string {
        if !has-started {
            "starting"
        } else if (self.running-machine-desc != "") {
            "running"
        } else if (self.report-message != "") {
            "report"
        } else {
            "ready"
        }
    }


    // Slint's crude menu bar
    if menubar-visible: MenuBar {
        Menu {
            title: @tr("MenuBar" => "File");
            MenuItem {
                title: @tr("MenuBar" => "Stop");
                enabled: mode() == "running";
                activated => {
                    menu-item-activated(parent.title, self.title);
                }
            }

            MenuItem {
                title: @tr("MenuBar" => "Pause");
                enabled: mode() == "running";
                activated => {
                    menu-item-activated(parent.title, self.title);
                }
            }

            MenuSeparator { }

            MenuItem {
                title: @tr("MenuBar" => "Devices and Images...");
                enabled: mode() == "running";
                activated => {
                    menu-item-activated(parent.title, self.title);
                }
            }

            MenuItem {
                title: @tr("MenuBar" => "Quick Load State");
                enabled: has-last-save-state;
                muda-accelerator: "F7";
                activated => {
                    menu-item-activated(parent.title, self.title);
                }
            }

            MenuItem {
                title: @tr("MenuBar" => "Quick Save State");
                enabled: has-last-save-state;
                muda-accelerator: "Shift+F7";
                activated => {
                    menu-item-activated(parent.title, self.title);
                }
            }

            MenuItem {
                title: @tr("MenuBar" => "Load State...");
                enabled: mode() == "running";
                muda-accelerator: "Ctrl+F7";
                activated => {
                    menu-item-activated(parent.title, self.title);
                }
            }

            MenuItem {
                title: @tr("MenuBar" => "Save State...");
                enabled: mode() == "running";
                muda-accelerator: "Ctrl+Shift+F7";
                activated => {
                    menu-item-activated(parent.title, self.title);
                }
            }

            MenuSeparator { }

            MenuItem {
                title: @tr("MenuBar" => "Save Screenshot...");
                enabled: mode() == "running";
                muda-accelerator: "F12";
                activated => {
                    menu-item-activated(parent.title, self.title);
                }
            }

            MenuItem {
                title: is-recording ? @tr("MenuBar" => "Stop Recording") : @tr("MenuBar" => "Record Movie...");
                enabled: can-record-movie;
                muda-accelerator: "Shift+F12";
                activated => {
                    menu-item-activated(parent.title, self.title);
                }
            }

            MenuSeparator { }

            MenuItem {
                title: @tr("MenuBar" => "Debugger...");
                enabled: mode() == "running";
                activated => {
                    menu-item-activated(parent.title, self.title);
                }
            }

            Menu {
                title: @tr("MenuBar" => "Reset");
                enabled: mode() == "running";
                MenuItem {
                    title: @tr("MenuBar" => "Soft Reset");
                    activated => {
                        menu-item-activated(parent.title, self.title);
                    }
                }

                MenuItem {
                    title: @tr("MenuBar" => "Hard Reset");
                    activated => {
                        menu-item-activated(parent.title, self.title);
                    }
                }
            }

            MenuItem {
                title: @tr("MenuBar" => "Exit");
                enabled: true;
                muda-accelerator: "Ctrl+Shift+KeyX";
                activated => {
                    menu-item-activated(parent.title, self.title);
                }
            }
        }

        Menu {
            title: @tr("MenuBar" => "Options");
            Menu {
                title: @tr("MenuBar" => "Throttle");
                enabled: mode() == "running";
                for entry[index] in menu-entries-throttle: MenuItem {
                    title: entry.title;
                    checkable: true;
                    checked: index == menu-entries-throttle-current-index;
                    activated => {
                        menu-item-command(entry.command);
                    }
                }
                MenuSeparator { }

                MenuItem {
                    title: @tr("MenuBar" => "Increase Speed");
                    muda-accelerator: "F9";
                    activated => {
                        menu-item-activated(parent.title, self.title);
                    }
                }

                MenuItem {
                    title: @tr("MenuBar" => "Decrease Speed");
                    muda-accelerator: "F8";
                    activated => {
                        menu-item-activated(parent.title, self.title);
                    }
                }

                MenuItem {
                    title: @tr("MenuBar" => "Warp mode");
                    checkable: true;
                    checked: !is-throttled;
                    muda-accelerator: "F10";
                    activated => {
                        menu-item-activated(parent.title, self.title);
                    }
                }
            }

            Menu {
                title: @tr("MenuBar" => "Frame Skip");
                enabled: mode() == "running";
                MenuItem {
                    title: "Auto";
                    activated => {
                        menu-item-activated(parent.title, self.title);
                    }
                }

                for rate in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]: MenuItem {
                    title: rate;
                    activated => {
                        menu-item-activated(parent.title, self.title);
                    }
                }
            }

            MenuItem {
                title: @tr("MenuBar" => "Full Screen");
                enabled: true;
                checkable: true;
                checked: is-fullscreen;
                muda-accelerator: "F11";
                activated => {
                    menu-item-activated(parent.title, self.title);
                }
            }

            MenuItem {
                title: @tr("MenuBar" => "Toggle Menu Bar");
                enabled: mode() == "running";
                muda-accelerator: "ScrollLock";
                activated => {
                    menu-item-activated(parent.title, self.title);
                }
            }

            MenuItem {
                title: @tr("MenuBar" => "Sound");
                enabled: mode() == "running";
                checkable: true;
                checked: is-sound-enabled;
                activated => {
                    menu-item-activated(parent.title, self.title);
                }
            }

            MenuItem {
                title: @tr("MenuBar" => "Cheats...");
                enabled: has-cheats;
                activated => {
                    menu-item-activated(parent.title, self.title);
                }
            }

            MenuSeparator { }

            MenuItem {
                title: @tr("MenuBar" => "Classic MAME Menu");
                enabled: has-classic-mame-menu;
                activated => {
                    menu-item-activated(parent.title, self.title);
                }
            }

            MenuItem {
                title: @tr("MenuBar" => "Console");
                enabled: true;
                activated => {
                    menu-item-activated(parent.title, self.title);
                }
            }
        }

        Menu {
            title: @tr("MenuBar" => "Settings");
            MenuItem {
                title: @tr("MenuBar" => "Joysticks and Controllers...");
                enabled: has-input-class-controller;
                activated => {
                    menu-item-activated(parent.title, self.title);
                }
            }

            MenuItem {
                title: @tr("MenuBar" => "Keyboard...");
                enabled: has-input-class-keyboard;
                activated => {
                    menu-item-activated(parent.title, self.title);
                }
            }

            MenuItem {
                title: @tr("MenuBar" => "Miscellaneous Input...");
                enabled: has-input-class-misc;
                activated => {
                    menu-item-activated(parent.title, self.title);
                }
            }

            MenuItem {
                title: @tr("MenuBar" => "Configuration...");
                enabled: has-input-class-config;
                activated => {
                    menu-item-activated(parent.title, self.title);
                }
            }

            MenuItem {
                title: @tr("MenuBar" => "DIP Switches...");
                enabled: has-input-class-dipswitch;
                activated => {
                    menu-item-activated(parent.title, self.title);
                }
            }

            MenuSeparator { }

            MenuItem {
                title: @tr("MenuBar" => "Paths...");
                enabled: true;
                activated => {
                    menu-item-activated(parent.title, self.title);
                }
            }

            Menu {
                title: @tr("MenuBar" => "Builtin Collections");
                enabled: true;
                for title in menu-items-builtin-collections: MenuItem {
                    title: title;
                    activated => {
                        menu-item-activated(parent.title, self.title);
                    }
                }
            }

            MenuItem {
                title: @tr("MenuBar" => "Reset Settings To Default");
                enabled: true;
                activated => {
                    menu-item-activated(parent.title, self.title);
                }
            }

            MenuItem {
                title: @tr("MenuBar" => "Import MAME INI...");
                enabled: true;
                activated => {
                    menu-item-activated(parent.title, self.title);
                }
            }
        }

        Menu {
            title: @tr("MenuBar" => "Help");
            MenuItem {
                title: @tr("MenuBar" => "Refresh MAME machine info...");
                enabled: can-refresh-info-db;
                activated => {
                    menu-item-activated(parent.title, self.title);
                }
            }

            MenuItem {
                title: @tr("MenuBar" => "BletchMAME web site...");
                enabled: true;
                activated => {
                    menu-item-activated(parent.title, self.title);
                }
            }

            MenuItem {
                title: @tr("MenuBar" => "About...");
                enabled: true;
                activated => {
                    menu-item-activated(parent.title, self.title);
                }
            }
        }
    }
    collection-context-menu := ContextMenuArea {
        Menu {
            if collection-context-menu-info.move-up-command != "": MenuItem {
                title: @tr("CollectionContextMenu" => "Move Up");
                activated => {
                    menu-item-command(collection-context-menu-info.move-up-command);
                }
            }
            if collection-context-menu-info.move-down-command != "": MenuItem {
                title: @tr("CollectionContextMenu" => "Move Down");
                activated => {
                    menu-item-command(collection-context-menu-info.move-down-command);
                }
            }
            if collection-context-menu-info.delete-command != "": MenuItem {
                title: @tr("CollectionContextMenu" => "Delete");
                activated => {
                    menu-item-command(collection-context-menu-info.delete-command);
                }
            }
            if collection-context-menu-info.rename-command != "": MenuItem {
                title: @tr("CollectionContextMenu" => "Rename");
                activated => {
                    menu-item-command(collection-context-menu-info.rename-command);
                }
            }
            MenuSeparator { }

            if collection-context-menu-info.new-collection-command != "": MenuItem {
                title: @tr("CollectionContextMenu" => "New Collection");
                activated => {
                    menu-item-command(collection-context-menu-info.new-collection-command);
                }
            }
        }
    }

    item-context-menu := ContextMenuArea {
        Menu {
            if !item-context-menu-info.run-desc.command.is-empty: MenuItem {
                title: item-context-menu-info.run-desc.title;
                activated => {
                    menu-item-command(item-context-menu-info.run-desc.command);
                }
            }
            if item-context-menu-info.run-subdescs.length > 0: Menu {
                title: item-context-menu-info.run-desc.title;
                for subdesc in item-context-menu-info.run-subdescs: MenuItem {
                    title: subdesc.title;
                    activated => {
                        menu-item-command(subdesc.command);
                    }
                }
            }
            if !item-context-menu-info.configure-command.is-empty: MenuItem {
                title: @tr("ItemContextMenu" => "Configure...");
                activated => {
                    menu-item-command(item-context-menu-info.configure-command);
                }
            }
            MenuSeparator { }

            if !item-context-menu-info.browse-command.is-empty: MenuItem {
                title: @tr("ItemContextMenu" => "Browse Software");
                activated => {
                    menu-item-command(item-context-menu-info.browse-command);
                }
            }
            if item-context-menu-info.add-to-existing-folder-descs.length > 0 || !item-context-menu-info.new-folder-command.is-empty: Menu {
                title: @tr("ItemContextMenu" => "Add To Folder");
                for desc in item-context-menu-info.add-to-existing-folder-descs: MenuItem {
                    title: desc.title;
                    activated => {
                        menu-item-command(desc.command);
                    }
                }
                MenuSeparator { }

                if !item-context-menu-info.new-folder-command.is-empty: MenuItem {
                    title: @tr("ItemContextMenu" => "New Folder...");
                    activated => {
                        menu-item-command(item-context-menu-info.new-folder-command);
                    }
                }
            }
            if !item-context-menu-info.remove-from-folder-desc.command.is-empty: MenuItem {
                title: item-context-menu-info.remove-from-folder-desc.title;
                activated => {
                    menu-item-command(item-context-menu-info.remove-from-folder-desc.command);
                }
            }
        }
    }

    hbox := GridLayout {
        HorizontalBox {
            row: 0;
            col: 0;
            alignment: stretch;

            // collections list view on the left
            collections-list-view := MagicListView {
                visible: root.mode() == "ready";
                horizontal-stretch: 0;
                vertical-stretch: 1;
                width: 250px;
                model: collections-model;
                selected(index) => {
                    collections-view-selected(index)
                }
                row-pointer-event(row, event, point) => {
                    collections-row-pointer-event(row, event, {
                        x: point.x + collections-list-view.absolute-position.x,
                        y: point.y + collections-list-view.absolute-position.y
                    })
                }
            }

            VerticalBox {
                alignment: stretch;
                horizontal-stretch: 1;
                
                // current collection label
                Text {
                    horizontal-alignment: left;
                    visible: root.mode() == "ready";
                    text: current-collection-text;
                    height: 20px;
                }
                
                // toolbar below the current collection
                HorizontalBox {
                    alignment: stretch;
                    visible: root.mode() == "ready";
                    height: 50px;
                    horizontal-stretch: 1;
                    vertical-stretch: 0;
                    preferred-width: 100%;
                    FilledIconButton {
                        horizontal-stretch: 0;
                        icon: @image-url("icons/arrow-back.svg");
                        enabled: history-can-go-back;
                        clicked => {
                            history-advance-clicked(-1)
                        }
                    }

                    FilledIconButton {
                        horizontal-stretch: 0;
                        icon: @image-url("icons/book.svg");
                        enabled: bookmark-collection-enabled;
                        clicked => {
                            bookmark-collection-clicked();
                        }
                    }

                    FilledIconButton {
                        horizontal-stretch: 0;
                        icon: @image-url("icons/arrow-forward.svg");
                        enabled: history-can-go-forward;
                        clicked => {
                            history-advance-clicked(+1)
                        }
                    }

                    SearchBar {
                        horizontal-stretch: 1;
                        text <=> items-search-text;
                        edited(text) => {
                            items-search-text-changed(text)
                        }
                    }
                }

                GridLayout {
                    horizontal-stretch: 1;
                    vertical-stretch: 1;
                    preferred-width: 100%;

                    // items table
                    items-table-view := StandardTableView {
                        visible: root.mode() == "ready";
                        rows: items-model;
                        sort-ascending(index) => {
                            items-sort-ascending(index)
                        }
                        sort-descending(index) => {
                            items-sort-descending(index)
                        }
                        current-row-changed(index) => {
                            items-current-row-changed()
                        }
                        row-pointer-event(row, event, point) => {
                            items-row-pointer-event(row, event, {
                                x: point.x + items-table-view.absolute-position.x,
                                y: point.y + items-table-view.absolute-position.y
                            })
                        }
                    }

                    // items empty text
                    Text {
                        visible: root.mode() == "ready" && is-empty-reason != "";
                        text: is-empty-reason;
                    }
                }
            }
        }

        // report view
        HorizontalBox {
            row: 0;
            col: 0;
            visible: root.mode() == "report";
            alignment: center;
            if root.report-spinning: VerticalBox {
                // spinner
                alignment: center;
                Spinner {
                    width: 150px;
                    height: 150px;
                    indeterminate: true;
                }
            }
            VerticalBox {
                alignment: center;

                // report message
                Text {
                    text: root.report-message;
                    horizontal-alignment: center;
                    font-size: 24px;
                    wrap: word-wrap;
                }

                // report submessage
                if root.report-submessage != "": Text {
                    text: root.report-submessage;
                    horizontal-alignment: center;
                    font-size: 12px;
                    wrap: word-wrap;
                }

                // report button
                if root.report-button-text != "": HorizontalBox {
                    alignment: center;
                    Button {
                        text: root.report-button-text;
                        width: 50px;
                        clicked => {
                            root.report-button-clicked();
                        }
                    }
                }

                // report issues
                for issue[index] in report-issues: HorizontalBox {
                    Text {
                        horizontal-alignment: left;
                        text: issue.text;
                    }

                    Button {
                        visible: issue.button-text != "";
                        text: issue.button-text;
                        clicked => {
                            root.issue-button-clicked(index);
                        }
                    }
                }
            }
        }
    }
}
