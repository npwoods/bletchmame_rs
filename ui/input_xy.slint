import { VerticalBox, GridBox, HorizontalBox, Button, StandardButton } from "std-widgets.slint";
import { InputDialogEntry } from "input.slint";
import { SimpleMenuEntry } from "common.slint";

component InputXyPart {
    // properties
    in property <InputDialogEntry> entry;

    // callbacks
    callback menu-item-command(string);
    callback context-button-clicked(Point);

    // widgets
    VerticalBox {
        visible: !(entry.name.is-empty && entry.text.is-empty && entry.primary-command.is-empty);
        Text {
            text: entry.text;
        }

        HorizontalBox {
            Button {
                text: entry.name;
                enabled: !entry.primary-command.is-empty;
                clicked => {
                    root.menu-item-command(entry.primary-command);
                }
            }

            Button {
                width: 40px;
                text: "â–¼";
                clicked => {
                    root.context-button-clicked({ x: self.absolute-position.x, y: self.absolute-position.y + self.height });
                }
            }
        }
    }
}

export component InputXyDialog inherits Window {
    // properties
    in property <string> dialog-title;
    in property <InputDialogEntry> left-entry;
    in property <InputDialogEntry> right-entry;
    in property <InputDialogEntry> up-entry;
    in property <InputDialogEntry> down-entry;
    in property <string> clear-command;
    in property <string> restore-defaults-command;

    // callbacks
    callback ok-clicked();
    callback menu-item-command(string);
    callback left-context-button-clicked(Point);
    callback right-context-button-clicked(Point);
    callback up-context-button-clicked(Point);
    callback down-context-button-clicked(Point);

    // context menu
    in-out property <[SimpleMenuEntry]> context-menu-entries-1;
    in-out property <[SimpleMenuEntry]> context-menu-entries-2;
    public function show-context-menu(entries-1: [SimpleMenuEntry], entries-2: [SimpleMenuEntry], point: Point) {
        self.context-menu-entries-1 = entries-1;
        self.context-menu-entries-2 = entries-2;
        context-menu.show(point);
    }

    // context menu control
    context-menu := ContextMenuArea {
        Menu {
            for entry in context-menu-entries-1: MenuItem {
                title: entry.title;
                enabled: entry.command != "";
                activated => {
                    root.menu-item-command(entry.command);
                }
            }
            if context-menu-entries-1.length > 0: MenuSeparator { }
            for entry in context-menu-entries-2: MenuItem {
                title: entry.title;
                enabled: entry.command != "";
                activated => {
                    root.menu-item-command(entry.command);
                }
            }
        }
    }

    // control hierarchy
    title: dialog-title;
    icon: @image-url("bletchmame.png");
    VerticalBox {
        GridBox {
            InputXyPart {
                col: 0;
                row: 1;
                entry: root.left-entry;
                menu-item-command(command) => {
                    root.menu-item-command(command);
                }
                context-button-clicked(point) => {
                    root.left-context-button-clicked(point);
                }
            }

            InputXyPart {
                col: 2;
                row: 1;
                entry: root.right-entry;
                menu-item-command(command) => {
                    root.menu-item-command(command);
                }
                context-button-clicked(point) => {
                    root.right-context-button-clicked(point);
                }
            }

            InputXyPart {
                col: 1;
                row: 0;
                entry: root.up-entry;
                menu-item-command(command) => {
                    root.menu-item-command(command);
                }
                context-button-clicked(point) => {
                    root.up-context-button-clicked(point);
                }
            }

            InputXyPart {
                col: 1;
                row: 2;
                entry: root.down-entry;
                menu-item-command(command) => {
                    root.menu-item-command(command);
                }
                context-button-clicked(point) => {
                    root.down-context-button-clicked(point);
                }
            }
        }

        HorizontalBox {
            Button {
                text: "Clear";
                enabled: !clear-command.is-empty;
                clicked => {
                    root.menu-item-command(clear-command);
                }
            }

            Button {
                text: "Restore Defaults";
                enabled: !restore-defaults-command.is-empty;
                clicked => {
                    root.menu-item-command(restore-defaults-command);
                }
            }

            StandardButton {
                kind: ok;
                clicked => {
                    root.ok-clicked();
                }
            }
        }
    }
}
