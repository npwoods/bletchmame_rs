import { Button, VerticalBox, HorizontalBox, ComboBox, ListView, LineEdit } from "std-widgets.slint";

export struct DeviceAndImageEntry {
    indent: int,
    display-tag: string,
    option-names: [string],
    option-descriptions: [string],
    current-option-index: int,
    filename: string}

export struct DevicesAndImagesState {
    entries: [DeviceAndImageEntry],
    none-string: string}

export struct DevicesAndImagesContextMenuInfo {
    load-image-command: string,
    connect-to-socket-command: string,
    unload-command: string}

export component DevicesAndImagesList {
    // properties
    in property <length> splitter: 240px;
    in property <DevicesAndImagesState> state;
    in property <bool> images-button-enabled;

    // callbacks
    callback entry-option-changed(int, string);
    callback entry-button-clicked(int, Point);
    callback menu-item-command(string);

    // context menu
    in-out property <DevicesAndImagesContextMenuInfo> context-menu-info;
    public function show-context-menu(info: DevicesAndImagesContextMenuInfo, point: Point) {
        self.context-menu-info = info;
        context-menu.show(point);
    }

    // context menu control
    context-menu := ContextMenuArea {
        Menu {
            MenuItem {
                title: @tr("DevicesAndImages" => "Create Image...");
                enabled: false;
            }

            MenuItem {
                title: @tr("DevicesAndImages" => "Load Image...");
                enabled: root.context-menu-info.load-image-command != "";
                activated => {
                    menu-item-command(root.context-menu-info.load-image-command);
                }
            }

            MenuItem {
                title: @tr("DevicesAndImages" => "Load Software List Part...");
                enabled: false;
            }

            MenuItem {
                title: @tr("DevicesAndImages" => "Connect To Socket...");
                enabled: root.context-menu-info.connect-to-socket-command != "";
                activated => {
                    menu-item-command(root.context-menu-info.connect-to-socket-command);
                }
            }

            MenuItem {
                title: @tr("DevicesAndImages" => "Unload");
                enabled: root.context-menu-info.unload-command != "";
                activated => {
                    menu-item-command(root.context-menu-info.unload-command);
                }
            }
        }
    }

    // controls
    ListView {
        for data[index] in root.state.entries: Rectangle {
            height: 30px;
            width: parent.width;
            Text {
                x: data.indent * 20px;
                text: data.display_tag;
            }

            ComboBox {
                x: root.splitter;
                width: root.width - root.splitter - 10px;
                visible: data.current-option-index >= 0;
                model: data.option-descriptions;
                current-index: data.current-option-index;
                selected(value) => {
                    root.entry-option-changed(index, data.option-names[self.current-index]);
                }
            }

            LineEdit {
                x: root.splitter;
                width: root.width - root.splitter - 50px;
                visible: data.current-option-index < 0;
                placeholder-text: root.state.none-string;
                text: data.filename;
                read-only: true;
            }

            Button {
                x: root.width - 50px;
                width: 30px;
                visible: data.current-option-index < 0;
                enabled: root.images-button-enabled;
                text: "...";
                clicked => {
                    root.entry-button-clicked(index, { x: self.absolute-position.x, y: self.absolute-position.y + self.height });
                }
            }
        }
    }
}
