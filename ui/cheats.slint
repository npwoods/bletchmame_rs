import { GridBox, VerticalBox, HorizontalBox, Button, StandardButton, ScrollView, CheckBox, Slider, ComboBox } from "std-widgets.slint";

export struct CheatsDialogEntry {
    cheat-type: string,
    cheat-enabled: bool,
    description: string,
    comment: string,
    has-changed-script: bool,
    value: int,
    minimum: int,
    maximum: int,
    step: int,
    items: [string],
}

export component CheatsDialog inherits Window {
    title: "Cheats";
    icon: @image-url("bletchmame.png");
    preferred-width: 600px;
    preferred-height: 500px;

    // properties
    in property <[CheatsDialogEntry]> entries;
    in property <length> splitter-position: 200px;

    // callbacks
    callback ok-clicked();
    callback set-cheat-state(index: int, enabled: bool);
    callback set-cheat-state-parameter(index: int, enabled: bool, parameter-index: int);

    // context menu control
    in-out property <int> context-menu-current-index;
    context-menu := ContextMenuArea {
        Menu {
            for item[index] in entries[context-menu-current-index].items: MenuItem {
                title: item;
                activated => {
                    root.set-cheat-state-parameter(context-menu-current-index, true, index);
                }
            }
        }
    }

    // control hierarchy
    VerticalBox {
        ScrollView {
            VerticalBox {
                padding: 3px;
                for entry[index] in root.entries: HorizontalLayout {
                    if entry.cheat-type == "text": Text {
                        text: entry.description;
                        vertical-alignment: center;
                    }
                    if entry.cheat-type == "one-shot": Button {
                        text: entry.description;
                        clicked => {
                            root.set-cheat-state(index, true);
                        }
                    }
                    if entry.cheat-type == "on-off": CheckBox {
                        text: entry.description;
                        checked: entry.cheat-enabled;
                        toggled => {
                            root.set-cheat-state(index, self.checked);
                        }
                    }
                    if entry.cheat-type == "one-shot-parameter": Button {
                        text: entry.description;
                        clicked => {
                            context-menu-current-index = index;
                            context-menu.show({ x: self.absolute-position.x, y: self.absolute-position.y + self.height });
                        }
                    }
                    if entry.cheat-type == "value-parameter": HorizontalLayout {
                        Text {
                            text: entry.description;
                            vertical-alignment: center;
                            width: splitter-position;
                        }

                        Slider {
                            value: entry.value;
                            minimum: entry.minimum;
                            maximum: entry.maximum;
                            step: entry.step;
                            changed(value) => {
                                if entry.has-changed-script {
                                    root.set-cheat-state-parameter(index, true, value);
                                }
                            }
                        }
                    }
                    if entry.cheat-type == "item-list-parameter": HorizontalLayout {
                        Text {
                            text: entry.description;
                            vertical-alignment: center;
                            width: splitter-position;
                        }

                        ComboBox {
                            model: entry.items;
                            vertical-stretch: 0;
                        }
                    }
                }

                // soak up remaining space
                Rectangle {
                    vertical-stretch: 1;
                }
            }
        }

        HorizontalBox {
            alignment: end;
            StandardButton {
                kind: ok;
                horizontal-stretch: 0;
                clicked => {
                    root.ok-clicked();
                }
            }
        }
    }
}
