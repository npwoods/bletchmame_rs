import { Button, HorizontalBox, VerticalBox, TabWidget, ComboBox, GridBox, StandardButton, ListView, CheckBox  } from "std-widgets.slint";
import { DevicesAndImagesList, DevicesAndImagesState, DevicesAndImagesContextMenuInfo } from "devimageslist.slint";

struct SoftwareMachine {
    machine-index: int,
    description: string,
    checked: bool}

export component ConfigureDialog inherits Window {
    title: dialog-title;
    icon: @image-url("bletchmame.png");
    preferred-width: 600px;
    preferred-height: 500px;

    // properties
    in property <string> dialog-title;
    in property <DevicesAndImagesState> dev-images-state;
    in property <string> dev-images-error;
    in property <[string]> ram-sizes-model;
    in-out property <int> ram-sizes-index;
    in property <[SoftwareMachine]> software-machines;
    in property <bool> software-machines-bulk-all-enabled;
    in property <bool> software-machines-bulk-none-enabled;

    // callbacks
    callback ok-clicked();
    callback cancel-clicked();
    callback reset-clicked();
    callback entry-option-changed(int, string);
    callback entry-button-clicked(int, Point);
    callback menu-item-command(string);
    callback software-machines-toggle-checked(int);
    callback software-machines-bulk-all-clicked();
    callback software-machines-bulk-none-clicked();

    // functions
    public function show-context-menu(info: DevicesAndImagesContextMenuInfo, point: Point) {
        dev-images-list.show-context-menu(info, point);
    }

    // control hierarchy
    VerticalBox {
        TabWidget {
            visible: root.software-machines.length == 0;
            Tab {
                title: "Devices";
                GridBox {
                    preferred-width: 100%;
                    preferred-height: 100%;
                    dev-images-list := DevicesAndImagesList {
                        visible: root.dev-images-error == "";
                        state: root.dev-images-state;
                        images-button-enabled: true;
                        entry-option-changed(index, option-name) => {
                            root.entry-option-changed(index, option-name);
                        }
                        entry-button-clicked(index, point) => {
                            root.entry-button-clicked(index, point);
                        }
                        menu-item-command(command) => {
                            root.menu-item-command(command);
                        }
                    }

                    Text {
                        visible: root.dev-images-error != "";
                        text: root.dev-images-error;
                    }
                }
            }

            Tab {
                title: "RAM Sizes";
                VerticalBox {
                    alignment: start;
                    GridLayout {
                        Text {
                            row: 0;
                            col: 0;
                            vertical-alignment: center;
                            text: "RAM Size:";
                        }

                        ComboBox {
                            row: 0;
                            col: 1;
                            model: root.ram-sizes-model;
                            enabled: root.ram-sizes-model.length >= 2;
                            current-index <=> ram-sizes-index;
                        }
                    }
                }
            }
        }

        if root.software-machines.length > 0: TabWidget {
            Tab {
                title: "Preferred Machines";
                VerticalBox {
                    ListView {
                        preferred-height: 100%;
                        vertical-stretch: 1;
                        for data[row] in root.software-machines: HorizontalBox {
                            CheckBox {
                                width: 24px;
                                checked: data.checked;
                                toggled => {
                                    root.software-machines-toggle-checked(row);
                                }
                            }

                            Text {
                                text: data.description;
                            }
                        }
                    }

                    HorizontalBox {
                        vertical-stretch: 0;
                        Button {
                            text: "Select All";
                            enabled: root.software-machines-bulk-all-enabled;
                            clicked => {
                                root.software-machines-bulk-all-clicked();
                            }
                        }

                        Button {
                            text: "Select None";
                            enabled: root.software-machines-bulk-none-enabled;
                            clicked => {
                                root.software-machines-bulk-none-clicked();
                            }
                        }
                    }
                }
            }
        }
        HorizontalBox {
            alignment: end;
            if root.software-machines.length == 0: StandardButton {
                max-height: 30px;
                kind: reset;
                clicked => {
                    root.reset-clicked();
                }
            }
            StandardButton {
                max-height: 30px;
                kind: cancel;
                clicked => {
                    root.cancel-clicked();
                }
            }

            StandardButton {
                max-height: 30px;
                kind: ok;
                enabled: root.dev-images-error == "";
                clicked => {
                    root.ok-clicked();
                }
            }
        }
    }
}
